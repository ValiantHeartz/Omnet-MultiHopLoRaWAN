//
// Generated file, do not edit! Created by opp_msgtool 6.0 from wmsg.msg.
//

#ifndef __WMSG_M_H
#define __WMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class wmsg;
/**
 * Class generated from <tt>wmsg.msg:1</tt> by opp_msgtool.
 * <pre>
 * packet wmsg
 * {
 *     int sourceID;
 *     int destID;
 *     int sourceRank;
 *     int sourcePriority;
 *     double sourceBattery;
 *     int assignpriority;
 *     int sourceNetworkedFlag;
 *     double x;
 *     double y;
 *     int lastActionTime;
 *     int sourcePacketLength;
 * }
 * </pre>
 */
class wmsg : public ::omnetpp::cPacket
{
  protected:
    int sourceID = 0;
    int destID = 0;
    int sourceRank = 0;
    int sourcePriority = 0;
    double sourceBattery = 0;
    int assignpriority = 0;
    int sourceNetworkedFlag = 0;
    double x = 0;
    double y = 0;
    int lastActionTime = 0;
    int sourcePacketLength = 0;

  private:
    void copy(const wmsg& other);

  protected:
    bool operator==(const wmsg&) = delete;

  public:
    wmsg(const char *name=nullptr, short kind=0);
    wmsg(const wmsg& other);
    virtual ~wmsg();
    wmsg& operator=(const wmsg& other);
    virtual wmsg *dup() const override {return new wmsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSourceID() const;
    virtual void setSourceID(int sourceID);

    virtual int getDestID() const;
    virtual void setDestID(int destID);

    virtual int getSourceRank() const;
    virtual void setSourceRank(int sourceRank);

    virtual int getSourcePriority() const;
    virtual void setSourcePriority(int sourcePriority);

    virtual double getSourceBattery() const;
    virtual void setSourceBattery(double sourceBattery);

    virtual int getAssignpriority() const;
    virtual void setAssignpriority(int assignpriority);

    virtual int getSourceNetworkedFlag() const;
    virtual void setSourceNetworkedFlag(int sourceNetworkedFlag);

    virtual double getX() const;
    virtual void setX(double x);

    virtual double getY() const;
    virtual void setY(double y);

    virtual int getLastActionTime() const;
    virtual void setLastActionTime(int lastActionTime);

    virtual int getSourcePacketLength() const;
    virtual void setSourcePacketLength(int sourcePacketLength);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const wmsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, wmsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline wmsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<wmsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __WMSG_M_H

